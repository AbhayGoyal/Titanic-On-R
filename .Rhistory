library(readr)
train <- read_csv("C:/Users/Abhay Goyal/Downloads/train.csv")
View(train)
str(train)
train <- read.csv("train.csv", stringsAsFactors = FALSE)
table(train$Survived)
prop.table(table(train$Survived))
prop.table(table(train$Survived))*100
library(readr)
test <- read_csv("C:/Users/Abhay Goyal/Downloads/test.csv")
View(test)
test$Survived <- rep(0,418)
table(train$Sex)
prop.table(table(train$Sex))
prop.table(table(train$Sex,train$Survived))
prop.table(table(train$Sex,train$Survived),1)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <-1
summary(train$Age)
train$Child
train$Child <- 0
train$Child[train$Age < 18 ] <- 1
aggregate(Survived ~ Sex + Child, data=train, FUN=sum)
aggregate(Survived ~ Sex + Child, data=train, FUN=length)
aggregate(Survived ~ Sex + Child, data=train, FUN=function(x){sum(x)/length(x)})
aggregate(Survived ~ Sex + Child, data=train, FUN=function(x){sum(x)/length(x)}*100)
train$Fare
train$Fare2 < '30+'
train$Fare2 <- '30+'
train$Fare2[train$Fare <30 & train$Fare>=20] <- '20-30'
train$Fare2[train$Fare <20 & train$Fare>=10] <- '10-20'
train$Fare2[train$Fare <10] <- '<10'
aggregate(Survived ~ Sex + Pclass + Fare2, data=train, function(x){sum(x)/length(x)})
aggregate(Survived ~ Sex + Pclass + Fare2, data=train, function(x){sum(x)/length(x)}*100)
test$Survived <- 0
test$Survived[test$Sex == 'female'] <- 1
test$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , data=train, method="class")
plot(fit)
text(fit)
install.packages(rattle)
install.packages("rattle")
install.packages("rpart.plot")
install.packages("RColorBrewer")
library(RColorBrewer)
library(rattle)
install.packages('rattle')
library(rattle)
library(rpart.plot)
fancyRpartPlot(fit)
library(rpart.plot)
fancyRpartPlot(fit)
fancyRpartPlot(fit)
library(rpart)
library(rpart.plot)
fancyRpartPlot(fit)
text(fit)
fancyRpartPlot(fit)
fit <- rpart(Survived ~ Sex, data=train, method="class")
fancyRpartPlot(fit)
library(hplot)
install.packages('hplot')
library(hplot)
install.packages('hplot')
fit <- rpart(Survived ~ Sex, data=train, method="class")
library(hplot)
fancyRpartPlot(fit)
rpart.plot(fit)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked , data=train, method="class")
rpart.plot(fit)
Prediction <- predict(fit, test, type='class')
submit <- data.frame(PassengerId = test$PassengerId, SUrvived = Prediction)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data =train, method="class", control = rpart.control(missplit=2, cp=0))
rpart.plot(fit)
train$Name[1]
test$Survived <- NA
combi <- rbind(train,test)
dim(train)
dim(test)
test$Child <- 0
test$Child[test$Age < 18] <- 1
test$Fare2 <- 0
test <- subset(test, -test$Cabin)
test <- subset(test, -test$Child)
test <- subset(test, -Child)
test <- subset(test, select = -Child)
test <- subset(test, select = -Fare2)
submit <- data.frame(PassengerId = test$PassengerId, Survived=Prediction)
write.csv(submit, file="fullgrowntree.csv",row.names = FALSE)
library(readr)
train <- read_csv("C:/Users/Abhay Goyal/Downloads/train.csv")
View(train)
library(readr)
test <- read_csv("C:/Users/Abhay Goyal/Downloads/test.csv")
View(test)
train$Name[1]
test$Survived <- NA
combi <- rbind(train,test)
combi$Name <- as.character(combi$Name)
combi$Name
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = '[,.]')
strsplit(combi$Name[1], split = '[,.]')[[1]]
strsplit(combi$Name[1], split = '[,.]')[[1]][2]
combi$Title <- sapply(combi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
combi$Title
combi$Title <- strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- strsplit(x, split='[,.]')[[1]][2])
combi$Title <- strsplit(x, split='[,.]'[[1]][2])
combi$Title <- strsplit(combi$Name, split='[,.]'[[1]][2])
combi$Title
combi$Title <- strsplit(combi$Name, split = '[,.]')[[1]][2]
combi$Title
combi$Title <- sapply(combi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
combi$Title
combi$Title <- sub(' ','', combi$Title)
combi$Title
table
table(combi$Title)
combi$Title[combi$Title %in% c('Mme','Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt','Don',''Major,'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Capt','Don','Major','Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Jonkheer','Lady','Dona','the Countess')] <- 'Lady'
table(combi$Title)
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Title <- sapply(combi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][1]})
combi$Title <- sapply(combi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][2]})
combi$Surname <- sapply(combi$Name, FUN= function(x){strsplit(x, split='[,.]')[[1]][1]})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname , sep="")
combi$FamilyID
combi$FamilyID[combi$FamilySize <=2] <- 'Small'
table(combi$FamilySize)
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <=2,]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
fir ,- rpart(Suurvuved ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
fit <- rpart(Suurvuved ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
library(rpart)
library(rpart.plot)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, method="class")
rpart.plot(fit)
Prediction <- predit(fit, test, type="class")
Prediction <- predict(fit, test, type="class")
submit <- data.frame(PassengerID = test$PassengerId, Survived = Prediction)
write.csv(submit, file="engineeredfeatures.csv", row.names = FALSE)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
test <- read_csv("C:/Users/Abhay Goyal/Downloads/test.csv")
View(test)
library(readr)
train <- read_csv("C:/Users/Abhay Goyal/Downloads/train.csv")
View(train)
sample(1:10, replace = TRUe)
sample(1:10, replace = TRUE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=combi[!is.na(combi$Age),], method = "anova")
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=combi[!is.na(combi$Age),], method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age)])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age)])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[!is.na(combi$Age)])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age)])
install.packages("randomForest")
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data=combi[!is.na(combi$Age),], method = "anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age)])
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
summary(combi)
summary(combi$Embarked)
which(combi$Embarked == '')
which(combi$Embarked == ' ')
which(combi$Embarked == is.na())
which(combi$Embarked == ' ')
is.na(combi$Embarked)
combi$Embarked[is.na()]
which(combi$Embarked == NA)
which(combi$Embarked == ' ')
which(combi$Embarked == 'NA')
which(combi$Embarked all.equal(' ') 'NA')
combi$Embarked(all.equal(' '))
combi$Embarked(all.equal('NA'))
which(combi$Embarked == 'NA')
is.na(combi$Embarked)
combi$Embarked[NA]
dim(is.na(combi))
dim(is.na(combi$Embarked))
dim(!is.na(combi$Embarked))
dim(as.na(combi$Embarked))
dim(is.na(combi$Embarked))
?which
which(combi$Embarked == 'NA')
which(combi$Embarked == ' ')
which(combi$Embarked)
which(combi$Embarked == NA)
arrayInd(combi$Embarked == ' ')
which(is.na(combi$Embarked))
combi$Embarked[c(62,830)] = 'S'
combi$Embarked <- factor(combi$Embarked)
which(is.na(combi$Fare))
combi$Fare <- median(combi$Fare, na.rm =TRUE)
summary(combi)
summary(combi$Age)
summary(combi$Pclass)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- 'Small'
combi$FamilyID2 <- factor(combi$FamilyID2)
combi$FamilyID2
combi$FamilyID
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data=train, importance = TRUE, ntree=2000)
varImpPlot(fit)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data=train, importance = TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + FamilySize + FamilyID2, data=train, importance = TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked  + FamilyID2, data=train, importance = TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data=train, importance = TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + FamilySize + FamilyID2, data=combi, importance = TRUE, ntree=2000)
train$Title <- sapply( )
?sapply
train$Title <- sapply(train , FUN= function(x) {strsplit})
train$Title <- sapply(train , FUN= function(x) {strsplit['.,'][[1]][2],})
train$Title <- sapply(train , FUN= function(x) {strsplit['.,'][[1]][2]})
train$Title <- sapply(combi$Name , FUN= function(x) {strsplit['.,'][[1]][2]})
train$Title <- sapply(combi$Name , FUN = function(x) {strsplit['.,'][[1]][2]})
train$Title <- sapply(combi$Name , FUN= function(x) {strsplit['.,'][[1]][2]})
train$Title <- sapply(combi$Name , FUN = function(x) {strsplit['.,'][[1]][2]})
combi$FamilySize <- combi$SibSp + combi$Parch + 1
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
# Combine small title groups
combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
# Convert to a factor
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
combi$Title <- sub(' ', '', combi$Title)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=combi, importance=TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=combi, importance=TRUE, ntree=2000)
which(is.na(combi$Survived))
which(is.na(combi$Survived)) <- 0
is.na(combi$Survived) <- 0
which(is.na(combi$Survived)) <- 0
which(is.na(combi$Survived))
train <- combi[1:89,]
train <- combi[1:891,]
test <- combi[892:1309,]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
which(is.na(test$Surname))
varImpPlot(fit)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, controls = cforest_unbiased(ntree=2000,mtry=3))
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
str(train)
train$Title <- as.factor(train$Title)
str(train)
train$Surname <- as.factor(train$Surname)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
train$Sex <- as.factor(train$Sex)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
varImpPlot(fit)
prediction <- predict(fit,test)
test$Sex <- as.factor(test$Sex)
test$Title <- as.factor(test$Title)
test$Surname <- as.factor(test$Surname)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
prediction <- predict(fit,test)
str(test)
prediction <- predict(fit,test)
str(train)
test$Surname <- factor(test$Surname, levels = levels(train$Surname))
test$Title <- factor(test$Title, levels = levels(train$Title))
test$Sex <- factor(test$Sex, levels =  levels(train$Sex))
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2,
data=train, importance=TRUE, ntree=2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerID = test$PassengerId, Survived = Prediction)
write.csv(submit, file="firstforest.csv", row.names = FALSE)
install.packages('party')
library(party)
set.seed(415)
str(train$Survived)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data=train, controls = cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type= "response"
)
submit <- data.frame(PassengerID = test$PassengerId, Survived = Prediction)
write.csv(submit, file="secondforest.csv" , row.names = FALSE)
